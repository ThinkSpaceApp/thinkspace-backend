enum TipoMaterialEstudo {
  QUIZZ
  FLASHCARD
  RESUMO_IA
  COMPLETO
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NivelEscolaridade {
  FUNDAMENTAL_INCOMPLETO
  FUNDAMENTAL_COMPLETO
  MEDIO_INCOMPLETO
  MEDIO_COMPLETO
  SUPERIOR_INCOMPLETO
  SUPERIOR_COMPLETO
  POS_GRADUACAO
  MESTRADO
  DOUTORADO
  PREFIRO_NAO_INFORMAR
}

enum TipoAtividade {
  FLASHCARDS
  RESUMOS
  QUESTOES
  OUTRO
}

enum ObjetivoPlataforma {
  PREPARACAO_PARA_VESTIBULAR
  APRENDIZADO_CONTINUO
  PREFIRO_NAO_INFORMAR
  REFORÃ‡O_ESCOLAR
  OUTRO
}

enum Funcao {
  ESTUDANTE
  ADMINISTRADOR_GERAL
}

enum FuncaoSalaEstudo {
  MEMBRO
  MODERADOR
}

enum CorMateria {
  SALMAO
  ROSA
  LILAS
  ROXO
}

enum OrigemMaterial {
  TOPICOS
  DOCUMENTO
  ASSUNTO
}

model Notificacao {
  id         String   @id @default(uuid())
  mensagem   String
  lida       Boolean  @default(false)
  data       DateTime @default(now())
  usuarioId  String
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])

  @@map("Notificacoes")
}

model Usuario {
  id                   String              @id @default(uuid())
  email                String              @unique
  dataNascimento       DateTime
  senha                String
  primeiroNome         String
  sobrenome            String
  nomeCompleto         String?
  emailVerificado      Boolean             @default(false)
  codigoVerificado     String              @unique
  codigoExpiracao      DateTime
  funcao               Funcao              @default(ESTUDANTE)
  foto                 String?             @default("https://ui-avatars.com/api/?name=User&background=8e44ad&color=fff")
  instituicaoId        String?
  escolaridade         NivelEscolaridade?
  areaDeInteresse      String?
  objetivoNaPlataforma ObjetivoPlataforma? @default(OUTRO)
  criadoEm             DateTime            @default(now())
  atualizadoEm         DateTime            @updatedAt
  suspenso             Boolean             @default(false)
  dataSuspensao        DateTime?
  verificacaoEmail     VerificacaoEmail?
  notificacoes         Notificacao[]
  materias             Materia[]
  experiencia          ExperienciaUsuario?
  ultimoLogin          DateTime?

  metricas        MetricasUsuario?
  materiais       MaterialEstudo[]
  salasModeradas  SalaEstudo[]         @relation("SalaEstudoModerador")
  membroSalas     MembroSala[]
  postagens       PostagemComunidade[]
  comentarios     Comentario[]
  postagensSalvas PostagemSalva[]
  denuncias       Denuncia[]
  Revisao         Revisao[]
  Calendario      Calendario[]

  Instituicao Instituicao? @relation(fields: [instituicaoId], references: [id])

  @@map("Usuario")
  PerfilUsuario PerfilUsuario[]
  AtividadeUsuario AtividadeUsuario[]
  ChatMensagem ChatMensagem[]
}

model VerificacaoEmail {
  id        String   @id @default(uuid())
  codigo    String
  expiraEm  DateTime
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId String   @unique
}

model TokenAdmin {
  id       String   @id @default(uuid())
  token    String   @unique
  usado    Boolean  @default(false)
  criadoEm DateTime @default(now())
}


model MaterialEstudo {
  id             String         @id @default(uuid())
  titulo         String
  origem         OrigemMaterial
  tipoMaterial   TipoMaterialEstudo
  nomeDesignado  String?
  materiaId      String
  materia        Materia        @relation(fields: [materiaId], references: [id])
  topicos        String[]
  caminhoArquivo String?
  pdfBinario    Bytes?
  conteudo       String? @db.Text
  assunto        String?
  autorId        String
  autor          Usuario        @relation(fields: [autorId], references: [id])
  resumoIA       String? @db.Text
  flashcards     Flashcard[]
  flashcardsJson String? @db.Text
  quizzes        Quiz[]
  quizzesJson    String? @db.Text
  respostasQuizJson String? @db.Text
  revisoes       Revisao[]
  chatHistoryJson Json?
  criadoEm       DateTime       @default(now())
  tempoAtivo     Int?           @default(0) 

  quantidadeQuestoes    Int?
  quantidadeFlashcards  Int?

  salasEstudo    SalaEstudoMaterial[]
  materias       Materia[]      @relation("MateriaParaMaterial")
  @@map("MaterialEstudo")
  ChatMensagem ChatMensagem[]
}

model ChatMensagem {
  id               String         @id @default(uuid())
  materialId       String
  material         MaterialEstudo @relation(fields: [materialId], references: [id])
  autorId          String
  autor            Usuario        @relation(fields: [autorId], references: [id])
  mensagemUsuario  String         @db.Text
  mensagemIa       String         @db.Text
  horarioMensagem  DateTime       @default(now())
  criadoEm         DateTime       @default(now())

  @@map("ChatMensagem")
}

model Flashcard {
  id         String         @id @default(uuid())
  pergunta   String
  resposta   String
  materialId String
  material   MaterialEstudo @relation(fields: [materialId], references: [id])
  criadoEm   DateTime       @default(now())
}

model Quiz {
  id         String         @id @default(uuid())
  perguntas  Json
  materialId String
  material   MaterialEstudo @relation(fields: [materialId], references: [id])
  criadoEm   DateTime       @default(now())
}

model SalaEstudo {
  id          String   @id @default(uuid())
  nome        String
  descricao   String?
  topicos     String[]
  banner      String?
  moderadorId String
  moderador   Usuario  @relation(fields: [moderadorId], references: [id], name: "SalaEstudoModerador")
  assunto     String?
  criadoEm    DateTime @default(now())

  membros    MembroSala[]
  atividades Atividade[]
  materiais  SalaEstudoMaterial[]
  Calendario Calendario[]

  TopicoComunidade TopicoComunidade[]
}

model MembroSala {
  usuarioId   String
  usuario     Usuario          @relation(fields: [usuarioId], references: [id])
  salaId      String
  sala        SalaEstudo       @relation(fields: [salaId], references: [id])
  funcao      FuncaoSalaEstudo @default(MEMBRO)
  ingressouEm DateTime         @default(now())

  @@id([usuarioId, salaId])
}

model Instituicao {
  id       String   @id @default(uuid())
  nome     String   @unique
  criadoEm DateTime @default(now())

  usuarios Usuario[]
}

model Atividade {
  id          String        @id @default(uuid())
  titulo      String
  descricao   String
  tipo        TipoAtividade
  dataEntrega DateTime?
  salaId      String
  sala        SalaEstudo    @relation(fields: [salaId], references: [id])
  criadoEm    DateTime      @default(now())
}

model TopicoComunidade {
  id       String     @id @default(uuid())
  nome     String
  salaId   String
  sala     SalaEstudo @relation(fields: [salaId], references: [id])
  criadoEm DateTime   @default(now())

  postagens PostagemComunidade[]
}

model PostagemComunidade {
  id       String           @id @default(uuid())
  titulo   String
  conteudo String
  autorId  String
  autor    Usuario          @relation(fields: [autorId], references: [id])
  topicoId String
  topico   TopicoComunidade @relation(fields: [topicoId], references: [id])
  curtidas Int              @default(0)
  tags     String[]
  criadoEm DateTime         @default(now())

  comentarios Comentario[]
  salvamentos PostagemSalva[]
  denuncias   Denuncia[]
}

model Comentario {
  id         String             @id @default(uuid())
  conteudo   String
  postagemId String
  postagem   PostagemComunidade @relation(fields: [postagemId], references: [id])
  autorId    String
  autor      Usuario            @relation(fields: [autorId], references: [id])
  criadoEm   DateTime           @default(now())

  denuncias Denuncia[]
}

model Denuncia {
  id            String              @id @default(uuid())
  motivo        String
  status        String              @default("PENDENTE")
  denuncianteId String
  denunciante   Usuario             @relation(fields: [denuncianteId], references: [id])
  postagemId    String?
  postagem      PostagemComunidade? @relation(fields: [postagemId], references: [id])
  comentarioId  String?
  comentario    Comentario?         @relation(fields: [comentarioId], references: [id])
  criadoEm      DateTime            @default(now())
}

model MetricasUsuario {
  id                    String    @id @default(uuid())
  usuarioId             String    @unique
  usuario               Usuario   @relation(fields: [usuarioId], references: [id])
  metaSemanal           Int?
  horasEstudadas        Int       @default(0)
  conquistas            String[]
  progresso             Json
  ultimaAtividade       DateTime
  sequenciaAtual        Int       @default(0)
  maiorSequencia        Int       @default(0)
  experienciaTotal      Int       @default(0)
  experienciaPorAcertos Int       @default(0)
  ultimaRevisao         DateTime?
  criadoEm              DateTime  @default(now())
}

model SalaEstudoMaterial {
  materialId  String
  material    MaterialEstudo @relation(fields: [materialId], references: [id])
  salaId      String
  sala        SalaEstudo     @relation(fields: [salaId], references: [id])
  atribuidoEm DateTime       @default(now())

  @@id([materialId, salaId])
}

model PostagemSalva {
  usuarioId  String
  usuario    Usuario            @relation(fields: [usuarioId], references: [id])
  postagemId String
  postagem   PostagemComunidade @relation(fields: [postagemId], references: [id])
  salvoEm    DateTime           @default(now())

  @@id([usuarioId, postagemId])
}

model Revisao {
  id          String         @id @default(uuid())
  usuarioId   String
  usuario     Usuario        @relation(fields: [usuarioId], references: [id])
  materialId  String
  material    MaterialEstudo @relation(fields: [materialId], references: [id])
  acertos     Int
  experiencia Int
  criadoEm    DateTime       @default(now())
}

model Calendario {
  id                     String        @id @default(uuid())
  titulo                 String
  descricao              String?
  dataInicio             DateTime
  dataFim                DateTime?
  tipo                   TipoAtividade @default(OUTRO)
  recorrente             Boolean       @default(false)
  intervaloDias          Int? // definir a frequÃªncia em dias
  dataTerminoRecorrencia DateTime? // data final para eventos recorrentes
  usuarioId              String?
  usuario                Usuario?      @relation(fields: [usuarioId], references: [id])
  salaId                 String? // extra
  sala                   SalaEstudo?   @relation(fields: [salaId], references: [id]) // extra
  criadoEm               DateTime      @default(now())

  @@index([dataInicio])
}

model Materia {
  id         String           @id @default(uuid())
  nome       String
  cor        CorMateria
  icone      String
  usuarioId  String
  tempoAtivo Int? @default(0)
  ultimaRevisao DateTime?
  usuario    Usuario          @relation(fields: [usuarioId], references: [id])
  materiais  MaterialEstudo[] @relation("MateriaParaMaterial")

  @@map("Materia")
  MaterialEstudo MaterialEstudo[]
}

model PerfilUsuario {
  id           String   @id @default(uuid())
  usuarioId    String   @unique
  usuario      Usuario  @relation(fields: [usuarioId], references: [id])
  avatar       String   @default("https://ui-avatars.com/api/?name=User&background=8e44ad&color=fff")
  xp           Int      @default(0)
  nivel        NivelUsuario @default(INICIANTE)
  progresso    Float    @default(0)
}

enum NivelUsuario {
  INICIANTE
  APRENDIZ
  JUNIOR
  AVANCADO
  ESPECIALISTA
  MENTOR
  ELITE
}

model ExperienciaUsuario {
  id        String       @id @default(uuid())
  usuario   Usuario      @relation(fields: [usuarioId], references: [id])
  usuarioId String       @unique
  avatar    String       @default("https://ui-avatars.com/api/?name=User&background=8e44ad&color=fff")
  xp        Int          @default(0)
  progresso Float        @default(0)
  nivel     NivelUsuario @default(INICIANTE)
}

model AtividadeUsuario {
  id        String   @id @default(uuid())
  usuarioId String
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  data      DateTime
  quantidade Int     @default(1)
  acertou    Boolean  @default(false)
  @@unique([usuarioId, data])
}
