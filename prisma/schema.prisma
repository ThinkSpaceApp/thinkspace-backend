// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SchoolingLevel {
  NONE
  ELEMENTARY
  MIDDLE_SCHOOL
  HIGH_SCHOOL
  UNDERGRADUATE
  GRADUATE
  OTHER
  PREFER_NOT_TO_ANSWER
}

enum ActivityType {
  TASK
  EXAM
  READING
  PROJECT
  OTHER
}

enum Role {
  STUDENT
  MOD
  ADMIN
}

enum StudyRoomRole {
  MEMBER
  MODERATOR
}

enum MaterialType {
  PDF
  TOPIC
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  dateOfBirth     DateTime
  password        String
  fullName        String
  role            Role             @default(STUDENT)
  institutionId   String?
  institution     Institution?     @relation(fields: [institutionId], references: [id])
  schoolingLevel  SchoolingLevel?
  metrics         UserMetrics?     
  studyMaterials  StudyMaterial[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt


  ManagedRooms    StudyRoom[]      @relation("RoomModerators")
  StudyRoomMember StudyRoomMember[]
  Posts           CommunityPost[]
  Comments        Comment[]

  Report Report[]
}

model StudyMaterial {
  id              String           @id @default(uuid())
  title           String
  type            MaterialType
  filePath        String?
  content         String?
  topicId         String?
  topic           StudyMaterial?   @relation("MaterialHierarchy", fields: [topicId], references: [id])
  children        StudyMaterial[]  @relation("MaterialHierarchy")
  authorId        String
  author          User             @relation(fields: [authorId], references: [id])
  aiSummary       String?
  flashcards      Flashcard[]
  quizzes         Quiz[]
  createdAt       DateTime         @default(now())

  StudyRoom StudyRoom[]
}

model Flashcard {
  id              String           @id @default(uuid())
  question        String
  answer          String
  materialId      String
  material        StudyMaterial    @relation(fields: [materialId], references: [id])
  createdAt       DateTime         @default(now())
}

model Quiz {
  id              String           @id @default(uuid())
  questions       Json
  materialId      String
  material        StudyMaterial    @relation(fields: [materialId], references: [id])
  createdAt       DateTime         @default(now())
}

model StudyRoom {
  id              String           @id @default(uuid())
  name            String
  modId           String
  mod             User             @relation("RoomModerators", fields: [modId], references: [id])
  members         StudyRoomMember[]
  materials       StudyMaterial[]
  activities      Activity[]
  createdAt       DateTime         @default(now())
}

model StudyRoomMember {
  id              String           @id @default(uuid())
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  studyRoom       StudyRoom        @relation(fields: [studyRoomId], references: [id])
  studyRoomId     String
  role            StudyRoomRole    @default(MEMBER)
  joinedAt        DateTime         @default(now())
}

model Institution {
  id              String           @id @default(uuid())
  name            String           @unique
  users           User[]
  createdAt       DateTime         @default(now())
}

model Activity {
  id              String           @id @default(uuid())
  title           String
  description     String
  type            ActivityType
  dueDate         DateTime?
  studyRoomId     String
  studyRoom       StudyRoom        @relation(fields: [studyRoomId], references: [id])
  createdAt       DateTime         @default(now())
}

model CommunityPost {
  id              String           @id @default(uuid())
  title           String
  content         String
  authorId        String
  author          User             @relation(fields: [authorId], references: [id])
  comments        Comment[]
  upvotes         Int              @default(0)
  tags            String[]
  reports         Report[]
  createdAt       DateTime         @default(now())
}

model Comment {
  id              String           @id @default(uuid())
  content         String
  postId          String
  post            CommunityPost    @relation(fields: [postId], references: [id])
  authorId        String
  author          User             @relation(fields: [authorId], references: [id])
  reports         Report[]
  createdAt       DateTime         @default(now())
}

model Report {
  id              String           @id @default(uuid())
  reason          String
  status          String           @default("PENDING")
  reporterId      String
  reporter        User             @relation(fields: [reporterId], references: [id])
  postId          String?
  post            CommunityPost?   @relation(fields: [postId], references: [id])
  commentId       String?
  comment         Comment?         @relation(fields: [commentId], references: [id])
  createdAt       DateTime         @default(now())
}

model UserMetrics {
  id              String           @id @default(uuid())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  weeklyGoal      Int?
  hoursStudied    Int              @default(0)
  achievements    String[]
  progress        Json
  lastActive      DateTime
  createdAt       DateTime         @default(now())
}